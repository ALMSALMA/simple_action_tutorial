// Generated by gencpp from file my_robot_msgs/LineRobotGoal.msg
// DO NOT EDIT!


#ifndef MY_ROBOT_MSGS_MESSAGE_LINEROBOTGOAL_H
#define MY_ROBOT_MSGS_MESSAGE_LINEROBOTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_robot_msgs
{
template <class ContainerAllocator>
struct LineRobotGoal_
{
  typedef LineRobotGoal_<ContainerAllocator> Type;

  LineRobotGoal_()
    : position(0)
    , velocity(0)  {
    }
  LineRobotGoal_(const ContainerAllocator& _alloc)
    : position(0)
    , velocity(0)  {
  (void)_alloc;
    }



   typedef int64_t _position_type;
  _position_type position;

   typedef int64_t _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LineRobotGoal_

typedef ::my_robot_msgs::LineRobotGoal_<std::allocator<void> > LineRobotGoal;

typedef boost::shared_ptr< ::my_robot_msgs::LineRobotGoal > LineRobotGoalPtr;
typedef boost::shared_ptr< ::my_robot_msgs::LineRobotGoal const> LineRobotGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_robot_msgs::LineRobotGoal_<ContainerAllocator1> & lhs, const ::my_robot_msgs::LineRobotGoal_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_robot_msgs::LineRobotGoal_<ContainerAllocator1> & lhs, const ::my_robot_msgs::LineRobotGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94edb56bed3ad41c3ae8fb360e37e933";
  }

  static const char* value(const ::my_robot_msgs::LineRobotGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94edb56bed3ad41cULL;
  static const uint64_t static_value2 = 0x3ae8fb360e37e933ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_robot_msgs/LineRobotGoal";
  }

  static const char* value(const ::my_robot_msgs::LineRobotGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal\n"
"int64 position\n"
"int64 velocity\n"
;
  }

  static const char* value(const ::my_robot_msgs::LineRobotGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LineRobotGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_robot_msgs::LineRobotGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_robot_msgs::LineRobotGoal_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    Printer<int64_t>::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ROBOT_MSGS_MESSAGE_LINEROBOTGOAL_H
